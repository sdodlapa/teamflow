#!/usr/bin/env python3
"""
Dependency Analysis Script for TeamFlow Backend
Systematically analyzes all Python files to identify required packages
"""

import os
import ast
import sys
from pathlib import Path
from collections import defaultdict
import importlib.util

def analyze_imports(file_path):
    """Extract all import statements from a Python file"""
    imports = set()
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        tree = ast.parse(content)
        for node in ast.walk(tree):
            if isinstance(node, ast.Import):
                for alias in node.names:
                    imports.add(alias.name.split('.')[0])
            elif isinstance(node, ast.ImportFrom):
                if node.module:
                    imports.add(node.module.split('.')[0])
    except Exception as e:
        print(f"Error parsing {file_path}: {e}")
    
    return imports

def get_third_party_packages(imports):
    """Filter out standard library imports to get only third-party packages"""
    # Standard library modules (Python 3.11+)
    stdlib_modules = {
        'os', 'sys', 'json', 'time', 'datetime', 'logging', 'asyncio',
        'pathlib', 'typing', 'collections', 'dataclasses', 'enum', 'functools',
        'itertools', 'contextlib', 'statistics', 'tempfile', 'shutil', 'hashlib',
        'uuid', 're', 'base64', 'urllib', 'http', 'email', 'io', 'gc',
        'traceback', 'warnings', 'weakref', 'copy', 'pickle', 'csv', 'sqlite3'
    }
    
    # Local app modules
    local_modules = {'app', 'tests'}
    
    # Filter to third-party only
    third_party = set()
    for imp in imports:
        if imp not in stdlib_modules and imp not in local_modules and not imp.startswith('_'):
            third_party.add(imp)
    
    return third_party

def map_imports_to_packages():
    """Map import names to actual package names"""
    return {
        'fastapi': 'fastapi==0.104.1',
        'uvicorn': 'uvicorn[standard]==0.24.0',
        'sqlalchemy': 'sqlalchemy==2.0.23',
        'alembic': 'alembic==1.12.1',
        'psycopg2': 'psycopg2-binary==2.9.9',
        'jose': 'python-jose[cryptography]==3.3.0',
        'passlib': 'passlib[bcrypt]==1.7.4',
        'pydantic': 'pydantic==2.5.0',
        'pydantic_settings': 'pydantic-settings==2.1.0',
        'email_validator': 'email-validator==2.3.0',
        'dotenv': 'python-dotenv==1.0.0',
        'httpx': 'httpx==0.25.2',
        'PIL': 'pillow==10.1.0',
        'magic': 'python-magic==0.4.27',
        'psutil': 'psutil==5.9.6',
        'redis': 'redis==5.0.1',
        'bcrypt': 'bcrypt==4.1.1',  # Often needed by passlib
        'cryptography': 'cryptography==41.0.7',  # Often needed by jose
        'websockets': 'websockets==12.0',
        'aiofiles': 'aiofiles==23.2.1',
        'multipart': 'python-multipart==0.0.6',
        'brotli': 'brotli==1.1.0',  # Compression
        'aioredis': 'aioredis==2.0.1',  # Async Redis
        'jinja2': 'jinja2==3.1.2',  # Templating
        'yaml': 'pyyaml==6.0.1',  # YAML processing
        'starlette': 'starlette==0.27.0',  # FastAPI dependency
    }

def main():
    backend_path = Path(__file__).parent.parent / "backend" / "app"
    
    all_imports = set()
    file_imports = defaultdict(set)
    
    # Analyze all Python files in backend/app
    for py_file in backend_path.rglob("*.py"):
        if py_file.name != "__init__.py":  # Skip __init__.py files
            imports = analyze_imports(py_file)
            file_imports[py_file] = imports
            all_imports.update(imports)
    
    # Get third-party packages
    third_party = get_third_party_packages(all_imports)
    package_mapping = map_imports_to_packages()
    
    print("=== DEPENDENCY ANALYSIS REPORT ===\n")
    
    print("Third-party packages detected:")
    for pkg in sorted(third_party):
        print(f"  - {pkg}")
    
    print(f"\nTotal third-party imports found: {len(third_party)}")
    
    print("\n=== REQUIREMENTS.TXT GENERATION ===\n")
    
    requirements = []
    missing_mappings = []
    
    for pkg in sorted(third_party):
        if pkg in package_mapping:
            requirements.append(package_mapping[pkg])
        else:
            missing_mappings.append(pkg)
    
    print("Generated requirements:")
    for req in requirements:
        print(f"  {req}")
    
    if missing_mappings:
        print(f"\nUnmapped packages (need manual mapping):")
        for pkg in missing_mappings:
            print(f"  - {pkg}")
    
    # Write complete requirements.txt
    output_file = Path(__file__).parent.parent / "backend" / "requirements_complete.txt"
    with open(output_file, 'w') as f:
        f.write("# Complete production dependencies for TeamFlow Backend\n")
        f.write("# Generated by analyze_dependencies.py\n\n")
        
        f.write("# Core FastAPI and web framework\n")
        core_deps = [req for req in requirements if any(x in req for x in ['fastapi', 'uvicorn', 'python-multipart'])]
        for dep in core_deps:
            f.write(f"{dep}\n")
        
        f.write("\n# Database and ORM\n")
        db_deps = [req for req in requirements if any(x in req for x in ['sqlalchemy', 'alembic', 'psycopg2'])]
        for dep in db_deps:
            f.write(f"{dep}\n")
        
        f.write("\n# Authentication and security\n")
        auth_deps = [req for req in requirements if any(x in req for x in ['jose', 'passlib', 'bcrypt', 'cryptography'])]
        for dep in auth_deps:
            f.write(f"{dep}\n")
        
        f.write("\n# Validation and serialization\n")
        valid_deps = [req for req in requirements if any(x in req for x in ['pydantic', 'email-validator'])]
        for dep in valid_deps:
            f.write(f"{dep}\n")
        
        f.write("\n# Environment and configuration\n")
        config_deps = [req for req in requirements if 'python-dotenv' in req]
        for dep in config_deps:
            f.write(f"{dep}\n")
        
        f.write("\n# HTTP client and networking\n")
        http_deps = [req for req in requirements if any(x in req for x in ['httpx', 'websockets', 'aiofiles'])]
        for dep in http_deps:
            f.write(f"{dep}\n")
        
        f.write("\n# Image processing and file handling\n")
        image_deps = [req for req in requirements if any(x in req for x in ['pillow', 'python-magic'])]
        for dep in image_deps:
            f.write(f"{dep}\n")
        
        f.write("\n# System monitoring and performance\n")
        perf_deps = [req for req in requirements if any(x in req for x in ['psutil', 'redis'])]
        for dep in perf_deps:
            f.write(f"{dep}\n")
        
        if missing_mappings:
            f.write("\n# Unmapped packages (review needed)\n")
            for pkg in missing_mappings:
                f.write(f"# {pkg}\n")
    
    print(f"\nComplete requirements written to: {output_file}")

if __name__ == "__main__":
    main()