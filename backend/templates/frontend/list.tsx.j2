/**
 * {{ entity.name }} List Component
 * Generated on: {{ today() }}
 * Domain: {{ domain.name }}
 */

import React, { useState, useEffect, useCallback } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import {
  Card,
  CardHeader,
  CardTitle,
  CardContent,
} from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { 
  Search, 
  Plus, 
  MoreHorizontal, 
  Edit, 
  Trash, 
  Eye,
  Filter,
  SortAsc,
  SortDesc,
} from 'lucide-react';
import { toast } from 'sonner';

import {
  {{ entity.name | camel_case }}Response,
  {{ entity.name | camel_case }}List,
  {{ entity.name | camel_case }}Filters,
  {{ entity.name | camel_case }}Sort,
  {% if entity.enums %}
  {% for enum_field in entity.enums %}
  {{ enum_field.name | camel_case }}Enum,
  {{ enum_field.name | camel_case }}EnumLabels,
  {% endfor %}
  {% endif %}
} from '../types/{{ entity.name | snake_case }}.types';
import { {{ entity.name | camel_case }}API } from '../services/{{ entity.name | snake_case }}.service';

interface {{ entity.name | camel_case }}ListProps {
  onCreateClick?: () => void;
  onEditClick?: ({{ entity.name | snake_case }}: {{ entity.name | camel_case }}Response) => void;
  onViewClick?: ({{ entity.name | snake_case }}: {{ entity.name | camel_case }}Response) => void;
  selectable?: boolean;
  onSelectionChange?: (selected: {{ entity.name | camel_case }}Response[]) => void;
}

export const {{ entity.name | camel_case }}List: React.FC<{{ entity.name | camel_case }}ListProps> = ({
  onCreateClick,
  onEditClick,
  onViewClick,
  selectable = false,
  onSelectionChange,
}) => {
  // State management
  const [currentPage, setCurrentPage] = useState(1);
  const [pageSize, setPageSize] = useState(20);
  const [search, setSearch] = useState('');
  const [filters, setFilters] = useState<{{ entity.name | camel_case }}Filters>({});
  const [sort, setSort] = useState<{{ entity.name | camel_case }}Sort>({ 
    field: {% if entity.default_sort %}'{{ entity.default_sort.field }}'{% else %}'createdAt'{% endif %}, 
    direction: {% if entity.default_sort %}'{{ entity.default_sort.direction }}'{% else %}'desc'{% endif %}
  });
  const [selectedItems, setSelectedItems] = useState<{{ entity.name | camel_case }}Response[]>([]);
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [itemToDelete, setItemToDelete] = useState<{{ entity.name | camel_case }}Response | null>(null);

  const queryClient = useQueryClient();

  // Fetch {{ entity.name | snake_case | plural }} with react-query
  const {
    data: {{ entity.name | snake_case }}Data,
    isLoading,
    isError,
    error,
  } = useQuery({
    queryKey: ['{{ entity.name | snake_case | plural }}', currentPage, pageSize, search, filters, sort],
    queryFn: () => {{ entity.name | camel_case }}API.list({
      skip: (currentPage - 1) * pageSize,
      limit: pageSize,
      filters: { ...filters, search },
      sort,
    }),
  });

  // Delete mutation
  const deleteMutation = useMutation({
    mutationFn: {{ entity.name | camel_case }}API.delete,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['{{ entity.name | snake_case | plural }}'] });
      toast.success('{{ entity.name | title }} deleted successfully');
      setDeleteDialogOpen(false);
      setItemToDelete(null);
    },
    onError: (error) => {
      toast.error('Failed to delete {{ entity.name | snake_case }}');
      console.error('Delete error:', error);
    },
  });

  // Handle delete
  const handleDelete = useCallback((item: {{ entity.name | camel_case }}Response) => {
    setItemToDelete(item);
    setDeleteDialogOpen(true);
  }, []);

  const confirmDelete = useCallback(() => {
    if (itemToDelete) {
      deleteMutation.mutate({ id: itemToDelete.id });
    }
  }, [itemToDelete, deleteMutation]);

  // Handle selection
  const handleItemSelection = useCallback((item: {{ entity.name | camel_case }}Response, selected: boolean) => {
    let newSelection: {{ entity.name | camel_case }}Response[];
    if (selected) {
      newSelection = [...selectedItems, item];
    } else {
      newSelection = selectedItems.filter(i => i.id !== item.id);
    }
    setSelectedItems(newSelection);
    onSelectionChange?.(newSelection);
  }, [selectedItems, onSelectionChange]);

  // Handle sorting
  const handleSort = useCallback((field: keyof {{ entity.name | camel_case }}Response) => {
    setSort(prev => ({
      field: field as any,
      direction: prev.field === field && prev.direction === 'asc' ? 'desc' : 'asc',
    }));
  }, []);

  // Format cell values
  const formatCellValue = (value: any, field: string) => {
    if (value === null || value === undefined) {
      return '-';
    }

    {% if entity.enums %}
    // Handle enum fields
    {% for enum_field in entity.enums %}
    if (field === '{{ enum_field.name }}') {
      return (
        <Badge variant="outline">
          {% raw %}{{% endraw %}{{ enum_field.name | camel_case }}EnumLabels[value as {{ enum_field.name | camel_case }}Enum] || value{% raw %}}{% endraw %}
        </Badge>
      );
    }
    {% endfor %}
    {% endif %}

    // Handle boolean fields
    if (typeof value === 'boolean') {
      return (
        <Badge variant={value ? 'default' : 'secondary'}>
          {value ? 'Yes' : 'No'}
        </Badge>
      );
    }

    // Handle date fields
    if (field.includes('date') || field.includes('At')) {
      return new Date(value).toLocaleDateString();
    }

    // Handle numeric fields
    {% for field in entity.fields %}
    {% if field.type == 'decimal' and field.name == 'price' %}
    if (field === '{{ field.name }}') {
      return new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD',
      }).format(value);
    }
    {% elif field.type == 'decimal' %}
    if (field === '{{ field.name }}') {
      return parseFloat(value).toFixed(2);
    }
    {% endif %}
    {% endfor %}

    return String(value);
  };

  if (isError) {
    return (
      <Card>
        <CardContent className="pt-6">
          <div className="text-center text-red-600">
            Error loading {{ entity.name | snake_case | plural }}: {error?.message}
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-4">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-2xl font-bold">{{ entity.name | title | plural }}</h1>
          {% raw %}{{% endraw %}{{ entity.name | snake_case }}Data && (
            <p className="text-muted-foreground">
              {% raw %}{{% endraw %}{{ entity.name | snake_case }}Data.total{% raw %}}{% endraw %} {{ entity.name | snake_case | plural }} found
            </p>
          ){% raw %}}{% endraw %}
        </div>
        {onCreateClick && (
          <Button onClick={onCreateClick}>
            <Plus className="h-4 w-4 mr-2" />
            Create {{ entity.name | title }}
          </Button>
        )}
      </div>

      {/* Filters and Search */}
      <Card>
        <CardContent className="pt-6">
          <div className="flex flex-col md:flex-row gap-4">
            {/* Search */}
            <div className="flex-1">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4" />
                <Input
                  placeholder="Search {{ entity.name | snake_case | plural }}..."
                  value={search}
                  onChange={(e) => setSearch(e.target.value)}
                  className="pl-10"
                />
              </div>
            </div>

            {% if entity.filterable_fields %}
            {/* Filters */}
            {% for filter_field in entity.filterable_fields %}
            {% if filter_field.type == 'enum' %}
            <div className="w-48">
              <Select
                value={filters.{{ filter_field.name }} || 'all'}
                onValueChange={(value) => 
                  setFilters(prev => ({
                    ...prev,
                    {{ filter_field.name }}: value === 'all' ? undefined : value
                  }))
                }
              >
                <SelectTrigger>
                  <SelectValue placeholder="{{ filter_field.name | title }}" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All {{ filter_field.name | title | plural }}</SelectItem>
                  {% for option in filter_field.options %}
                  <SelectItem value="{{ option.value }}">{{ option.label or option.value | title }}</SelectItem>
                  {% endfor %}
                </SelectContent>
              </Select>
            </div>
            {% elif filter_field.type == 'boolean' %}
            <div className="w-48">
              <Select
                value={filters.{{ filter_field.name }} === undefined ? 'all' : String(filters.{{ filter_field.name }})}
                onValueChange={(value) => 
                  setFilters(prev => ({
                    ...prev,
                    {{ filter_field.name }}: value === 'all' ? undefined : value === 'true'
                  }))
                }
              >
                <SelectTrigger>
                  <SelectValue placeholder="{{ filter_field.name | title }}" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All</SelectItem>
                  <SelectItem value="true">Yes</SelectItem>
                  <SelectItem value="false">No</SelectItem>
                </SelectContent>
              </Select>
            </div>
            {% endif %}
            {% endfor %}
            {% endif %}

            {/* Page Size */}
            <div className="w-32">
              <Select
                value={String(pageSize)}
                onValueChange={(value) => setPageSize(Number(value))}
              >
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="10">10 per page</SelectItem>
                  <SelectItem value="20">20 per page</SelectItem>
                  <SelectItem value="50">50 per page</SelectItem>
                  <SelectItem value="100">100 per page</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Data Table */}
      <Card>
        <CardContent className="p-0">
          <Table>
            <TableHeader>
              <TableRow>
                {selectable && (
                  <TableHead className="w-12">
                    <input
                      type="checkbox"
                      checked={selectedItems.length === {{ entity.name | snake_case }}Data?.items.length && selectedItems.length > 0}
                      onChange={(e) => {
                        if (e.target.checked) {
                          setSelectedItems({{ entity.name | snake_case }}Data?.items || []);
                          onSelectionChange?.({{ entity.name | snake_case }}Data?.items || []);
                        } else {
                          setSelectedItems([]);
                          onSelectionChange?.([]);
                        }
                      }}
                    />
                  </TableHead>
                )}
                
                {/* Display Field */}
                {% if entity.display_field %}
                <TableHead 
                  className="cursor-pointer hover:bg-muted/50"
                  onClick={() => handleSort('{{ entity.display_field }}')}
                >
                  <div className="flex items-center">
                    {{ entity.display_field | title }}
                    {sort.field === '{{ entity.display_field }}' && (
                      sort.direction === 'asc' ? <SortAsc className="ml-2 h-4 w-4" /> : <SortDesc className="ml-2 h-4 w-4" />
                    )}
                  </div>
                </TableHead>
                {% endif %}

                {/* Key Fields */}
                {% for field in entity.fields[:4] %}
                {% if field.name != entity.display_field %}
                <TableHead 
                  className="cursor-pointer hover:bg-muted/50"
                  onClick={() => handleSort('{{ field.name }}')}
                >
                  <div className="flex items-center">
                    {{ field.name | title }}
                    {sort.field === '{{ field.name }}' && (
                      sort.direction === 'asc' ? <SortAsc className="ml-2 h-4 w-4" /> : <SortDesc className="ml-2 h-4 w-4" />
                    )}
                  </div>
                </TableHead>
                {% endif %}
                {% endfor %}

                <TableHead 
                  className="cursor-pointer hover:bg-muted/50"
                  onClick={() => handleSort('createdAt')}
                >
                  <div className="flex items-center">
                    Created At
                    {sort.field === 'createdAt' && (
                      sort.direction === 'asc' ? <SortAsc className="ml-2 h-4 w-4" /> : <SortDesc className="ml-2 h-4 w-4" />
                    )}
                  </div>
                </TableHead>

                <TableHead className="w-12">Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {isLoading ? (
                <TableRow>
                  <TableCell colSpan={selectable ? 7 : 6} className="text-center py-8">
                    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto" />
                    <p className="mt-2 text-muted-foreground">Loading {{ entity.name | snake_case | plural }}...</p>
                  </TableCell>
                </TableRow>
              ) : {{ entity.name | snake_case }}Data?.items.length === 0 ? (
                <TableRow>
                  <TableCell colSpan={selectable ? 7 : 6} className="text-center py-8">
                    <p className="text-muted-foreground">No {{ entity.name | snake_case | plural }} found</p>
                  </TableCell>
                </TableRow>
              ) : (
                {{ entity.name | snake_case }}Data?.items.map((item) => (
                  <TableRow key={item.id}>
                    {selectable && (
                      <TableCell>
                        <input
                          type="checkbox"
                          checked={selectedItems.some(selected => selected.id === item.id)}
                          onChange={(e) => handleItemSelection(item, e.target.checked)}
                        />
                      </TableCell>
                    )}

                    {/* Display Field */}
                    {% if entity.display_field %}
                    <TableCell className="font-medium">
                      {formatCellValue(item.{{ entity.display_field }}, '{{ entity.display_field }}')}
                    </TableCell>
                    {% endif %}

                    {/* Key Fields */}
                    {% for field in entity.fields[:4] %}
                    {% if field.name != entity.display_field %}
                    <TableCell>
                      {formatCellValue(item.{{ field.name }}, '{{ field.name }}')}
                    </TableCell>
                    {% endif %}
                    {% endfor %}

                    <TableCell>
                      {formatCellValue(item.createdAt, 'createdAt')}
                    </TableCell>

                    <TableCell>
                      <DropdownMenu>
                        <DropdownMenuTrigger asChild>
                          <Button variant="ghost" size="sm">
                            <MoreHorizontal className="h-4 w-4" />
                          </Button>
                        </DropdownMenuTrigger>
                        <DropdownMenuContent align="end">
                          {onViewClick && (
                            <DropdownMenuItem onClick={() => onViewClick(item)}>
                              <Eye className="mr-2 h-4 w-4" />
                              View
                            </DropdownMenuItem>
                          )}
                          {onEditClick && (
                            <DropdownMenuItem onClick={() => onEditClick(item)}>
                              <Edit className="mr-2 h-4 w-4" />
                              Edit
                            </DropdownMenuItem>
                          )}
                          <DropdownMenuItem 
                            onClick={() => handleDelete(item)}
                            className="text-destructive"
                          >
                            <Trash className="mr-2 h-4 w-4" />
                            Delete
                          </DropdownMenuItem>
                        </DropdownMenuContent>
                      </DropdownMenu>
                    </TableCell>
                  </TableRow>
                ))
              )}
            </TableBody>
          </Table>
        </CardContent>
      </Card>

      {/* Pagination */}
      {% raw %}{{% endraw %}{{ entity.name | snake_case }}Data && {{ entity.name | snake_case }}Data.pages > 1 && (
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-2">
            <Button
              variant="outline"
              size="sm"
              onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}
              disabled={currentPage === 1}
            >
              Previous
            </Button>
            <span className="text-sm text-muted-foreground">
              Page {currentPage} of {{ entity.name | snake_case }}Data.pages
            </span>
            <Button
              variant="outline"
              size="sm"
              onClick={() => setCurrentPage(prev => Math.min({{ entity.name | snake_case }}Data.pages, prev + 1))}
              disabled={currentPage === {{ entity.name | snake_case }}Data.pages}
            >
              Next
            </Button>
          </div>
          <div className="text-sm text-muted-foreground">
            Showing {Math.min(pageSize * (currentPage - 1) + 1, {{ entity.name | snake_case }}Data.total)} to{' '}
            {Math.min(pageSize * currentPage, {{ entity.name | snake_case }}Data.total)} of {{ entity.name | snake_case }}Data.total entries
          </div>
        </div>
      )}

      {/* Delete Confirmation Dialog */}
      <Dialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Delete {{ entity.name | title }}</DialogTitle>
            <DialogDescription>
              Are you sure you want to delete this {{ entity.name | snake_case }}? 
              {itemToDelete?.{{ entity.display_field or 'id' }} && (
                <>This action cannot be undone.</>
              )}
            </DialogDescription>
          </DialogHeader>
          <DialogFooter>
            <Button variant="outline" onClick={() => setDeleteDialogOpen(false)}>
              Cancel
            </Button>
            <Button 
              variant="destructive" 
              onClick={confirmDelete}
              disabled={deleteMutation.isPending}
            >
              {deleteMutation.isPending ? 'Deleting...' : 'Delete'}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default {{ entity.name | camel_case }}List;