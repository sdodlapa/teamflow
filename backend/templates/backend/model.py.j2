"""
{{ entity.name }} Model
Generated on: {{ today() }}
Domain: {{ domain.name }}
"""

from datetime import datetime, date, time
from typing import Optional, List, Dict, Any
from decimal import Decimal
import uuid

from sqlalchemy import Column, String, Integer, Boolean, DateTime, Date, Time, Text, Numeric, JSON, ForeignKey, UUID, Enum
from sqlalchemy.orm import relationship
{% if entity.enums %}
import enum
{% endif %}

from app.models.base import BaseModel


{% if entity.enums %}
# Enum definitions
{% for enum_field in entity.enums %}
class {{ enum_field.name | camel_case }}Enum(enum.Enum):
    """{{ enum_field.description or enum_field.name }} enumeration."""
    {% for option in enum_field.options %}
    {{ option.value | upper }} = "{{ option.value }}"
    {% endfor %}


{% endfor %}
{% endif %}
class {{ entity.name | camel_case }}(BaseModel):
    """
    {{ entity.description or entity.name }} model.
    
    {% if entity.description %}
    {{ entity.description }}
    {% endif %}
    
    Fields:
    {% for field in entity.fields %}
    - {{ field.name }}: {{ field.type }}{% if field.required %} (required){% endif %}{% if field.description %} - {{ field.description }}{% endif %}
    {% endfor %}
    
    {% if entity.relationships %}
    Relationships:
    {% for rel in entity.relationships %}
    - {{ rel.name }}: {{ rel.type }} to {{ rel.target }}{% if rel.description %} - {{ rel.description }}{% endif %}
    {% endfor %}
    {% endif %}
    """
    
    __tablename__ = "{{ entity.name | snake_case | plural }}"
    
    # Fields
    {% for field in entity.fields %}
    {% if field.type == 'enum' %}
    {{ field.name }} = Column(Enum({{ field.name | camel_case }}Enum), {% if field.required %}nullable=False{% else %}nullable=True{% endif %}{% if field.default %}, default={{ field.default }}{% endif %})
    {% else %}
    {{ field.name }} = Column({{ field.type | sqlalchemy_type }}{% if field.type == 'string' and field.max_length %}({{ field.max_length }}){% endif %}, {% if field.required %}nullable=False{% else %}nullable=True{% endif %}{% if field.default %}, default={{ field.default }}{% endif %}{% if field.unique %}, unique=True{% endif %})
    {% endif %}
    {% if field.description %}
    # {{ field.description }}
    {% endif %}
    {% endfor %}
    
    {% if entity.relationships %}
    # Relationships
    {% for rel in entity.relationships %}
    {% if rel.type == 'many_to_one' %}
    {{ rel.target | snake_case }}_id = Column(UUID(as_uuid=True), ForeignKey("{{ rel.target | snake_case | plural }}.id"){% if rel.required %}, nullable=False{% else %}, nullable=True{% endif %})
    {{ rel.name }} = relationship("{{ rel.target | camel_case }}", back_populates="{{ entity.name | snake_case | plural }}")
    {% elif rel.type == 'one_to_many' %}
    {{ rel.name }} = relationship("{{ rel.target | camel_case }}", back_populates="{{ entity.name | snake_case }}")
    {% elif rel.type == 'many_to_many' %}
    {{ rel.name }} = relationship("{{ rel.target | camel_case }}", secondary="{{ entity.name | snake_case }}_{{ rel.target | snake_case }}", back_populates="{{ entity.name | snake_case | plural }}")
    {% elif rel.type == 'one_to_one' %}
    {{ rel.target | snake_case }}_id = Column(UUID(as_uuid=True), ForeignKey("{{ rel.target | snake_case | plural }}.id"), unique=True{% if rel.required %}, nullable=False{% else %}, nullable=True{% endif %})
    {{ rel.name }} = relationship("{{ rel.target | camel_case }}", uselist=False, back_populates="{{ entity.name | snake_case }}")
    {% endif %}
    {% if rel.description %}
    # {{ rel.description }}
    {% endif %}
    {% endfor %}
    {% endif %}
    
    def __repr__(self) -> str:
        """String representation of {{ entity.name | camel_case }}."""
        {% if entity.display_field %}
        return f"<{{ entity.name | camel_case }}(id={self.id}, {{ entity.display_field }}={getattr(self, '{{ entity.display_field }}', 'N/A')})>"
        {% else %}
        return f"<{{ entity.name | camel_case }}(id={self.id})>"
        {% endif %}
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert model to dictionary."""
        return {
            "id": str(self.id),
            {% for field in entity.fields %}
            "{{ field.name }}": {% if field.type in ['datetime', 'date', 'time'] %}self.{{ field.name }}.isoformat() if self.{{ field.name }} else None{% elif field.type == 'decimal' %}float(self.{{ field.name }}) if self.{{ field.name }} else None{% elif field.type == 'enum' %}self.{{ field.name }}.value if self.{{ field.name }} else None{% else %}self.{{ field.name }}{% endif %},
            {% endfor %}
            "created_at": self.created_at.isoformat() if self.created_at else None,
            "updated_at": self.updated_at.isoformat() if self.updated_at else None,
        }